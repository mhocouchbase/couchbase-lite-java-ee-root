#!/usr/bin/make
#
# A makefile for the SEE shell programs for Linux.
#
CC = @CC@ -DSQLITE_HAS_CODEC
CFLAGS = -I. @CPPFLAGS@ @CFLAGS@

# The particular SEE source code file to use
#
ALGORITHM = @ALGORITHM@
SEE = @srcdir@/see$(ALGORITHM).c

# Top-level directory for the public-domain SQLite source tree.
#
SQLITE = @SQLITEDIR@

# Top-level diretory of the SEE source tree
TREE = @srcdir@

# Define this for the autoconf-based build, so that the code knows it can
# include the generated config.h
# 
CC += -D_HAVE_SQLITE_CONFIG_H -DBUILD_sqlite

# Define -DNDEBUG to compile without debugging (i.e., for production usage)
# Omitting the define will cause extra debugging code to be inserted and
# includes extra comments when "EXPLAIN stmt" is used.
#
CC += @TARGET_DEBUG@

# Compiler options needed for programs that use the TCL library.
#
CC += @TCL_INCLUDE_SPEC@

# The library that programs using TCL must link against.
#
LIBTCL = @TCL_LIB_SPEC@

# Compiler options needed for programs that use the readline() library.
#
READLINE_FLAGS = -DHAVE_READLINE=@TARGET_HAVE_READLINE@ @TARGET_READLINE_INC@
READLINE_FLAGS += -DHAVE_EDITLINE=@TARGET_HAVE_EDITLINE@

# The library that programs using readline() must link against.
#
LIBREADLINE = @TARGET_READLINE_LIBS@

# Should the database engine be compiled threadsafe
#
CC += -DSQLITE_THREADSAFE=@SQLITE_THREADSAFE@

# Any target libraries which libsqlite must be linked against
# 
LIBS += @LIBS@

# Flags controlling use of the in memory btree implementation
#
# SQLITE_TEMP_STORE is 0 to force temporary tables to be in a file, 1 to
# default to file, 2 to default to memory, and 3 to force temporary
# tables to always be in memory.
#
TEMP_STORE = -DSQLITE_TEMP_STORE=@TEMP_STORE@

# Extra compiler options for the command-line shell
#
SHELL_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS4
# SHELL_OPT += -DSQLITE_ENABLE_FTS5
SHELL_OPT += -DSQLITE_ENABLE_EXPLAIN_COMMENTS
SHELL_OPT += -DSQLITE_ENABLE_UNKNOWN_SQL_FUNCTION
SHELL_OPT += -DSQLITE_ENABLE_STMTVTAB
SHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB
SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB


# Enable/disable loadable extensions, and other optional features
# based on configuration. (-DSQLITE_OMIT*, -DSQLITE_ENABLE*).  
# The same set of OMIT and ENABLE flags should be passed to the 
# LEMON parser generator and the mkkeywordhash tool as well.
OPT_FEATURE_FLAGS = @OPT_FEATURE_FLAGS@

CC += $(OPT_FEATURE_FLAGS)

# Add in any optional parameters specified on the make commane line
# ie.  make "OPTS=-DSQLITE_ENABLE_FOO=1 -DSQLITE_OMIT_FOO=1".
CC += $(OPTS)

all:	see

sqlite3-see.c:	$(TREE)/see-prefix.txt $(TREE)/sqlite3.c $(SEE)
	cat $(TREE)/see-prefix.txt $(TREE)/sqlite3.c $(SEE) >sqlite3-see.c

see:	sqlite3-see.c $(TREE)/sqlite3.h $(TREE)/shell.c
	$(CC) -I$(TREE) $(CFLAGS) $(SHELL_OPT) $(READLINE_FLAGS) -o $@ \
		 sqlite3-see.c $(TREE)/shell.c \
		 $(LIBREADLINE) $(LIBS)

# Source code to the test files.
#
TESTSRC = \
  $(SQLITE)/src/test1.c \
  $(SQLITE)/src/test2.c \
  $(SQLITE)/src/test3.c \
  $(SQLITE)/src/test4.c \
  $(SQLITE)/src/test5.c \
  $(SQLITE)/src/test6.c \
  $(SQLITE)/src/test7.c \
  $(SQLITE)/src/test8.c \
  $(SQLITE)/src/test9.c \
  $(SQLITE)/src/test_autoext.c \
  $(SQLITE)/src/test_async.c \
  $(SQLITE)/src/test_backup.c \
  $(SQLITE)/src/test_bestindex.c \
  $(SQLITE)/src/test_blob.c \
  $(SQLITE)/src/test_btree.c \
  $(SQLITE)/src/test_config.c \
  $(SQLITE)/src/test_delete.c \
  $(SQLITE)/src/test_demovfs.c \
  $(SQLITE)/src/test_devsym.c \
  $(SQLITE)/src/test_fs.c \
  $(SQLITE)/src/test_func.c \
  $(SQLITE)/src/test_hexio.c \
  $(SQLITE)/src/test_init.c \
  $(SQLITE)/src/test_intarray.c \
  $(SQLITE)/src/test_journal.c \
  $(SQLITE)/src/test_malloc.c \
  $(SQLITE)/src/test_md5.c \
  $(SQLITE)/src/test_multiplex.c \
  $(SQLITE)/src/test_mutex.c \
  $(SQLITE)/src/test_onefile.c \
  $(SQLITE)/src/test_osinst.c \
  $(SQLITE)/src/test_pcache.c \
  $(SQLITE)/src/test_quota.c \
  $(SQLITE)/src/test_rtree.c \
  $(SQLITE)/src/test_schema.c \
  $(SQLITE)/src/test_server.c \
  $(SQLITE)/src/test_superlock.c \
  $(SQLITE)/src/test_syscall.c \
  $(SQLITE)/src/test_tclsh.c \
  $(SQLITE)/src/test_tclvar.c \
  $(SQLITE)/src/test_thread.c \
  $(SQLITE)/src/test_vdbecov.c \
  $(SQLITE)/src/test_vfs.c \
  $(SQLITE)/src/test_windirent.c \
  $(SQLITE)/src/test_window.c \
  $(SQLITE)/src/test_wsd.c       \
  $(SQLITE)/ext/fts3/fts3_term.c \
  $(SQLITE)/ext/fts3/fts3_test.c \
  $(SQLITE)/ext/rbu/test_rbu.c 

# Statically linked extensions
#
TESTSRC += \
  $(SQLITE)/ext/expert/sqlite3expert.c \
  $(SQLITE)/ext/expert/test_expert.c \
  $(SQLITE)/ext/misc/amatch.c \
  $(SQLITE)/ext/misc/carray.c \
  $(SQLITE)/ext/misc/closure.c \
  $(SQLITE)/ext/misc/csv.c \
  $(SQLITE)/ext/misc/eval.c \
  $(SQLITE)/ext/misc/explain.c \
  $(SQLITE)/ext/misc/fileio.c \
  $(SQLITE)/ext/misc/fuzzer.c \
  $(SQLITE)/ext/fts5/fts5_tcl.c \
  $(SQLITE)/ext/fts5/fts5_test_mi.c \
  $(SQLITE)/ext/fts5/fts5_test_tok.c \
  $(SQLITE)/ext/misc/ieee754.c \
  $(SQLITE)/ext/misc/mmapwarm.c \
  $(SQLITE)/ext/misc/nextchar.c \
  $(SQLITE)/ext/misc/normalize.c \
  $(SQLITE)/ext/misc/percentile.c \
  $(SQLITE)/ext/misc/prefixes.c \
  $(SQLITE)/ext/misc/remember.c \
  $(SQLITE)/ext/misc/regexp.c \
  $(SQLITE)/ext/misc/series.c \
  $(SQLITE)/ext/misc/spellfix.c \
  $(SQLITE)/ext/misc/totype.c \
  $(SQLITE)/ext/misc/unionvtab.c \
  $(SQLITE)/ext/misc/wholenumber.c


# Rules to build the 'testfixture' application.
#
# If using the amalgamation, use sqlite3.c directly to build the test
# fixture.  Otherwise link against libsqlite3.la.  (This distinction is
# necessary because the test fixture requires non-API symbols which are
# hidden when the library is built via the amalgamation).
#
TESTFIXTURE_FLAGS  = -DSQLITE_TEST=1 -DSQLITE_CRASH_TEST=1
TESTFIXTURE_FLAGS += -DTCLSH_INIT_PROC=sqlite3TestInit
TESTFIXTURE_FLAGS += -DSQLITE_SERVER=1 -DSQLITE_PRIVATE="" -DSQLITE_CORE 
TESTFIXTURE_FLAGS += -DBUILD_sqlite
TESTFIXTURE_FLAGS += -DSQLITE_SERIES_CONSTRAINT_VERIFY=1
TESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024
TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB
TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB
TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DESERIALIZE

TESTFIXTURE_SRC = sqlite3-see.c $(SQLITE)/src/tclsqlite.c $(TESTSRC)

# Standard options to testfixture
#
TESTOPTS = --verbose=file --output=test-out.txt

testfixture:	$(TESTFIXTURE_SRC)
	$(CC) $(CFLAGS) -DSQLITE_NO_SYNC=1 $(TEMP_STORE) $(TESTFIXTURE_FLAGS) \
		-I$(SQLITE) -o $@ $(TESTFIXTURE_SRC) $(LIBTCL) $(LIBS)

test:	testfixture
	./testfixture $(SQLITE)/test/veryquick.test $(TESTOPTS)

valgrindtest:	testfixture
	OMIT_MISUSE=1 valgrind -v ./testfixture $(SQLITE)/test/permutations.test valgrind $(TESTOPTS)

clean:	
	rm -f see sqlite3-see.c testfixture
	rm -rf testdir
