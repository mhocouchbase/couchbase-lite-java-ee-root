<!--
 *
 * System.Data.SQLite.SEE.targets -
 *
 * WARNING: This MSBuild file requires MSBuild 4.0 features.
 *
 * MSBuild targets file for System.Data.SQLite with the SQLite Encryption
 * Extension (SEE)
 *
 * Copyright (c) 2004-2008 Hipp, Wyrick & Company, Inc.
 * 6200 Maple Cove Lane, Charlotte, NC 28269 USA
 * +1.704.948.4565
 *
 * All rights reserved.
 *
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
  ******************************************************************************
  **                           HOW TO USE THIS FILE                           **
  ******************************************************************************

     1. Locate the ".csproj" or ".vbproj" project file for the project that
        needs to use an SEE enabled build of System.Data.SQLite.

     2. Open the project file in a text editor and locate a line similar to
        one of the following:

        <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

        -OR-

        <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />

     3. Insert the following line immediately before the aforementioned line:

        <Import Project="$(MSBuildProjectDirectory)\System.Data.SQLite.SEE.targets" />

     4. Locate the line matching "<BuildDependsOn>".  It one exists, it should
        be part of XML block similar to the following:

        <PropertyGroup>
          <BuildDependsOn>
            $(BuildDependsOn);
            ...
          </BuildDependsOn>
        </PropertyGroup>

        In the above, the "..." represents one or more build targets that are
        called during the build process, after the binaries have been built.

        Insert the literal string "CopySystemDataSQLite;" (without the double
        quotes and including the semicolon) on the line immediately after the
        line containing "$(BuildDependsOn);".  Then, proceed to step 6, below.
        The resulting XML block should look very similar to the one in step 5,
        below; however, it may contain more build targets after the line that
        contains "CopySystemDataSQLite;".

     5. If you reached this step, there is no line matching "<BuildDependsOn>"
        in the project file.  Insert the following block verbatim immediately
        after the line located in step 2, above:

        <PropertyGroup>
          <BuildDependsOn>
            $(BuildDependsOn);
            CopySystemDataSQLite;
          </BuildDependsOn>
        </PropertyGroup>

     6. Copy this file (i.e. "System.Data.SQLite.SEE.targets") to the directory
        containing the project file located in step 1, above.

     7. Create the following sub-directories within the project directory (i.e.
        the directory containing the project file located in step 1, above):

        $(ProjectDir)\Externals\System.Data.SQLite
        $(ProjectDir)\Externals\System.Data.SQLite\x86
        $(ProjectDir)\Externals\System.Data.SQLite\x64

     8. Copy the managed-only assembly file "System.Data.SQLite.dll" into the
        directory "$(ProjectDir)\Externals\System.Data.SQLite".

     9. For the "x86" processor architecture, copy the associated native-only
        interop assembly file "SQLite.Interop.dll" into the directory
        "$(ProjectDir)\Externals\System.Data.SQLite\x86".

    10. Repeat step 9, above, for all supported processor architectures.  For
        now, only the "x86" and "x64" processor architectures are supported.

    11. In Visual Studio, add a reference to the following managed assembly,
        which was copied in step 8, above:

        $(ProjectDir)\Externals\System.Data.SQLite\System.Data.SQLite.dll

        First, right click on "References" in the "Solution Explorer" pane
        and click "Add Reference...".  Then, click the "Browse" button and
        locate the "$(ProjectDir)\Externals\System.Data.SQLite" directory.
        Finally, double click on the "System.Data.SQLite.dll" file.

    12. Rebuild the project in Visual Studio -OR- on the command line via the
        MSBuild toolset.

    13. Verify that the build output directory for the selected configuration
        (e.g. Debug) contains all of the following sub-directories and files:

        $(ProjectDir)\bin\Debug\System.Data.SQLite.dll
        $(ProjectDir)\bin\Debug\x86\SQLite.Interop.dll
        $(ProjectDir)\bin\Debug\x64\SQLite.Interop.dll
  -->

  <!--
  ******************************************************************************
  **                          Load Per-User Settings                          **
  ******************************************************************************
  -->

  <!--
      NOTE: If the per-user settings file exists, import it now.  The contained
            settings, if any, will override the default ones provided below.
  -->
  <Import Condition="'$(MSBuildThisFileDirectory)' != '' And
                     HasTrailingSlash('$(MSBuildThisFileDirectory)') And
                     Exists('$(MSBuildThisFileDirectory)\System.Data.SQLite.SEE.targets.user')"
          Project="$(MSBuildThisFileDirectory)\System.Data.SQLite.SEE.targets.user" />

  <!--
  ******************************************************************************
  **                          Copy-to-Output Targets                          **
  ******************************************************************************
  -->

  <Target Name="CopySystemDataSQLite"
          Condition="'$(CopySystemDataSQLite)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)') And
                     '$(MSBuildProjectDirectory)' != '' And
                     !HasTrailingSlash('$(MSBuildProjectDirectory)') And
                     Exists('$(MSBuildProjectDirectory)\Externals\System.Data.SQLite')"
          Inputs="$(TargetPath)"
          Outputs="$(TargetPath).CopySystemDataSQLite.done">
    <CreateItem Include="$(MSBuildProjectDirectory)\Externals\System.Data.SQLite\**">
      <Output ItemName="SystemDataSQLiteFiles" TaskParameter="Include" />
    </CreateItem>

    <Copy SourceFiles="@(SystemDataSQLiteFiles)"
          DestinationFiles="@(SystemDataSQLiteFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')" />

    <Touch AlwaysCreate="true"
           Files="$(TargetPath).CopySystemDataSQLite.done" />
  </Target>
</Project>
