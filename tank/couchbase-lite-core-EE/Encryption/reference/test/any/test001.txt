/*
** Run this script using an SEE-enabled shell.
**
**    see <test001.txt
*/

/* Verify that a --textkey of xyzzy generates an appropriate hash key */
.open -new -textkey xyzzy test.db
CREATE TABLE t1(x);
.open -hexkey ae62f1cd14879f114c29ee890cc49911 test.db
.testcase 100
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t1(x); ok"

/* The aes128: prefix does not matter.  It still works */
.open --textkey aes128:xyzzy test.db
.testcase 110
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t1(x); ok"

/* A single-bit change in the -textkey results in a very different hash */
.open -new -textkey xyzzx test.db
CREATE TABLE t1(x);
.open -hexkey a0cd802244e2cd9affb8bd7eb40c77fb test.db
.testcase 200
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t1(x); ok"
.testcase 201
.open -textkey aes128:xyzzx test.db
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t1(x); ok"

/* Verify that --key of xyzzY generates a repeated of the key */
.open -new -key xyzzY test.db
CREATE TABLE t2(y);
.testcase 210
.open -key aes128:xyzzY test.db
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t2(y); ok"
.open -hexkey 78797a7a5978797a7a5978797a7a5978 test.db
.testcase 211
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t2(y); ok"
.testcase 212
.text-rekey 78797a7a5978797a7a5978797a7a5978 xyzzy xyzzy
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t2(y); ok"

/* After changing the key, log in again. */
.open -textkey xyzzy test.db
.testcase 230
.schema
PRAGMA integrity_check;
.check "CREATE TABLE t2(y); ok"

/* ATTACH the database using a blob key */
.open :memory:
.testcase 300
ATTACH 'test.db' AS see KEY x'ae62f1cd14879f114c29ee890cc49911';
SELECT sql FROM see.sqlite_master;
PRAGMA see.integrity_check;
.check "CREATE TABLE t2(y) ok"

/* The correct textkey is copied from the main database connection
** into attachments, if no KEY phrase is specified. */
.testcase 400
.open --new --textkey xyzzy second.db
CREATE TABLE second(x,y,z);
ATTACH 'test.db' AS orig;
SELECT sql FROM orig.sqlite_master;
PRAGMA orig.integrity_check;
.check "CREATE TABLE t2(y) ok"
.testcase 410
.open --textkey aes128:xyzzy second.db
ATTACH 'test.db' AS orig;
SELECT sql FROM orig.sqlite_master;
PRAGMA orig.integrity_check;
.check "CREATE TABLE t2(y) ok"
