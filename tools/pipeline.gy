//
//  Pipeline build for Java product
//

// These three methods set the tags that determine which agent will run a stage
def static osxNode() {
    return "cbl-java&&macosx_x86_64"
}

def static windowsNode(version) {
    switch (version) {
        case ~/3\..+/:
            return "cbl-java&&windows2016"
        case ~/2\.8\../:
            return "cbl-java&&windows2016"
        default:
            return "cbl-java&&window"
    }
}

def static linuxNode(distro) {
    switch (distro) {
        case "centos7":
            return "cbl-java&&centos73"
        case "centos6":
            return "cbl-java&&centos6-gcc"
    }
}

// check for pre- or post lithium build
static boolean isNewWorkspace(version) {
    String[] v = version.split("\\.")
    if (v.length < 2) { throw new IllegalArgumentException("Bad version: ${version}") }

    int majorVersion = v[0].toInteger()

    return (majorVersion >= 3) || ((majorVersion == 2) && (v[1].toInteger >= 8))
}

static String getRootDir(ws, version) { return (!isNewWorkspace(version)) ? ws : "${ws}/cbl-java" }

static String getBuildDir(rootDir, version, edition) {
    boolean isNewWs = isNewWorkspace(version)
    switch (edition) {
        case 'enterprise':
            return (isNewWs) ? "${rootDir}/ee/java" : "${rootDir}/couchbase-lite-java-ee"

        case 'community':
            return (isNewWs) ? "${rootDir}/ce/java" : "${rootDir}/couchbase-lite-java"
        default:
            throw new IllegalArgumentException("Bad edition: ${edition}")
    }
}

static String uName(credentials) { return credentials.split(":")[0] }
static String pwd(credentials) { return credentials.split(":")[1] }

pipeline {
    // Force each stage is to specify an explicit agent
    agent none
    environment {
        LATESTBUILDS = "http://latestbuilds.service.couchbase.com/builds/latestbuilds"
        SOURCE = "couchbase-lite-java-${VERSION}-${BLD_NUM}-source.tar.gz"
    }
    stages {
        stage('Set build name') {
            steps {
                script { currentBuild.displayName = "${VERSION}-${EDITION}-${BLD_NUM}" }
            }
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////   STATIC ANALYSIS   ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        stage('Static analysis') {
            agent { label linuxNode("${DISTRO}") }
            environment {
                CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                DISTRO = "centos6"
            }
            options {
                // ??? Doesn't work
                // buildDiscarder(logRotator(numToKeepStr: '10'))
                skipDefaultCheckout(true)
            }
            stages {
                // use cbdep to install jdk 11 on centos6:
                // rebuilding the centos6 docker iamge is too much of hack.
                // there's already a jdk 11 on the ubnuntu18 image so no need to download it there.
                stage('Linux Build: Clean Workspace') {
                    steps { cleanWs(deleteDirs: true) }
                }
                stage('Linux Build: Download and explode the source') {
                    steps {
                        sh '''#!/bin/bash
echo "======== Linux: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== Linux: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz
'''
                    }
                }
                stage('Linux Build: Prep Workspace') {
                    steps {
                        script {
                            if ("${DISTRO}".toString() == "centos6") {
                                sh '''cbdep install -d "${WORKSPACE}" java 11.0.3'''
                            }
                        }
                        sh '''#!/bin/bash
echo "======== Linux: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''
                        sh '''#!/bin/bash
echo "maven.repo.user=${MAVEN_REPO_USR}" > "${BUILD_DIR}/local.properties"
echo "maven.repo.pass=${MAVEN_REPO_PSW}" >> "${BUILD_DIR}/local.properties"
'''
                    }
                }
                stage('Check') {
                    steps {
                        sh '''#!/bin/bash
if [[ "${DISTRO}" == "centos6" ]]; then
    export JAVA_HOME="${WORKSPACE}/java-11.0.3"
    export PATH="${JAVA_HOME}/bin:$PATH"
fi

cd "${BUILD_DIR}"

echo "======== Linux: Environment"
javac -version
env | sort | grep -v 'MAVEN_REPO'

echo "======== Linux: Chect"

# Everything below this line
# goes in a file named <root>/(ce|ee)/java/etc/jenkins/check.sh

function usage() {
    echo "Usage: $0 <build number> <distro>"
    exit 1
}

if ["$#" -ne 2]; then
    usage
fi

BUILD_NUMBER = "$1"
if [-z "${BUILD_NUMBER}"]; then
    usage
fi

DISTRO = "$2"
if [-z "${DISTRO}"]; then
    usage
fi

echo "======== CHECK Couchbase Lite Java, Enterprise Edition v`cat ../../version.txt`-${BUILD_NUMBER} (${DISTRO})"
touch local.properties
./gradlew ciCheck -PbuildNumber="${BUILD_NUMBER}" || exit 1
'''
                    }
                }
            }
        }

        stage('Parallel Builds for Windows and OSX') {
            parallel {


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////   O S X   B U I L D   /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                stage('Build OSX') {
                    agent { label osxNode() }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    options {
                        // ??? Doesn't work
                        // buildDiscarder(logRotator(numToKeepStr: '10'))
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage('OSX Build: Clean Workspace') {
                            steps { cleanWs(deleteDirs: true) }
                        }
                        stage('OSX Build: Download and explode the source') {
                            steps {
                                sh '''#!/bin/bash
echo "======== OSX: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== OSX: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz
'''
                            }
                        }
                        stage('OSX Build: Prep Workspace') {
                            environment { MAVEN_REPO = credentials('ProgetApiKey') }
                            steps {
                                script {
                                    env.MAVEN_REPO_USR = uName(env.MAVEN_REPO)
                                    env.MAVEN_REPO_PSW = pwd(MAVEN_REPO)
                                }
                                sh '''#!/bin/bash
echo "======== OSX: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''
                                sh '''#!/bin/bash
echo "maven.repo.user=${MAVEN_REPO_USR}" > "${BUILD_DIR}/local.properties"
echo "maven.repo.pass=${MAVEN_REPO_PSW}" >> "${BUILD_DIR}/local.properties"
'''
                            }
                        }
                        stage('OSX: Build') {
                            steps {
                                sh '''#!/bin/bash
cd "${BUILD_DIR}"

echo "======== OSX: Environment"
javac -version
env | sort | grep -v 'MAVEN_REPO'

echo "======== OSX: Building in `pwd`"
./etc/jenkins/build_macos.sh ${BLD_NUM} || exit $?
'''
                            }
                        }
                        stage('OSX: Publish to ciMaven') {
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh '''#!/bin/bash
cd "${BUILD_DIR}"

echo "======== OSX: Publish"
ARTIFACTS_DIR="$WORKSPACE/artifacts"
rm -rf "${ARTIFACTS_DIR}"
mkdir -p "${ARTIFACTS_DIR}"

./etc/jenkins/publish_macos.sh "${VERSION}" "${BLD_NUM}" "${ARTIFACTS_DIR}" "${WORKSPACE}" || exit $?
'''
                                }
                            }
                        }
                        stage('OSX: Upload build artifacts') {
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "artifacts/*.*",
                                                        removePrefix: "artifacts",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////   W I N D O W S   B U I L D    /////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                stage('Build Windows') {
                    agent { label windowsNode("${VERSION}") }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    options {
                        // ??? Doesn't work
                        // buildDiscarder(logRotator(numToKeepStr: '10'))
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage('Win Build: Clean Workspace') {
                            steps { cleanWs(deleteDirs: true) }
                        }
                        stage('Win: Download and explode the source') {
                            steps {
                                bat '''
echo "======== Windows: Download source"
set SITE=%LATESTBUILDS%/couchbase-lite-java/%RELEASE%/%BLD_NUM%/%SOURCE%
powershell -command "& { (New-Object Net.WebClient).DownloadFile('%SITE%', '%SOURCE%') }" || goto error

echo "======== Windows: Extract source"
cmake -E tar xzf %SOURCE% || goto error

goto :eof

:error
echo Failed with error %ERRORLEVEL%.
exit /b %ERRORLEVEL%
'''
                            }
                        }
                        stage('Win Build: Prep Workspace') {
                            environment { MAVEN_REPO = credentials('ProgetApiKey') }
                            steps {
                                script {
                                    env.MAVEN_REPO_USR = uName(env.MAVEN_REPO)
                                    env.MAVEN_REPO_PSW = pwd(MAVEN_REPO)
                                }
                                bat '''
curl -o cbdep.exe http://downloads.build.couchbase.com/cbdep/cbdep.windows-x86_64.exe
cbdep.exe install -d %WORKSPACE% java 11.0.3
'''
                                bat '''
echo "======== Windows: Force version "%VERSION%
echo %VERSION% > %CBL_ROOT%/version.txt
'''
                                bat '''
echo maven.repo.user=%MAVEN_REPO_USR%> %BUILD_DIR%/local.properties
echo maven.repo.pass=%MAVEN_REPO_PSW%>> %BUILD_DIR%/local.properties
'''
                            }
                        }
                        stage('Win: Build') {
                            steps {
                                bat '''
SET PATH=%WORKSPACE%\\java-11.0.3\\bin;%PATH%
SET BLD_SYS=2017

cd %BUILD_DIR% || goto error

echo ======== Windows: Building in %BUILD_DIR%
call %BUILD_DIR%\\etc\\jenkins\\build_windows.bat %BLD_SYS% %BLD_NUM% || goto error

exit

:error
echo Failed with error %ERRORLEVEL%.
exit /b %ERRORLEVEL%
'''
                            }
                        }
                        stage('Win: Publish to ciMaven') {
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    bat '''
SET PATH=%WORKSPACE%\\java-11.0.3\\bin;%PATH%
SET BLD_SYS=2017

cd %BUILD_DIR% || goto error

echo ======== Windows: Publish
mkdir %WORKSPACE%\\artifacts
call %BUILD_DIR%\\etc\\jenkins\\publish_windows.bat %VERSION% %BLD_NUM% %WORKSPACE%\\artifacts || goto error

exit

:error
echo Failed with error %ERRORLEVEL%.
exit /b %ERRORLEVEL%
'''
                                }
                            }
                        }
                        stage('Win: Upload build artifacts') {
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "artifacts/*.*",
                                                        removePrefix: "artifacts",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////   L I N U X   B U I L D   //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        stage('Build Linux') {
            // It is a real shame that we have to do all this stuff again...
            // ... it is quite possible that we don't...
            agent { label linuxNode("${DISTRO}") }
            environment {
                CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
            }
            options {
                // ??? Doesn't work
                // buildDiscarder(logRotator(numToKeepStr: '10'))
                skipDefaultCheckout(true)
            }
            stages {
                 // use cbdep to install jdk 11 on centos6:
                // rebuilding the centos6 docker iamge is too much of hack.
                // there's already a jdk 11 on the ubnuntu18 image so no need to download it there.
                stage('Linux Build: Clean Workspace') {
                    steps { cleanWs(deleteDirs: true) }
                }
                stage('Linux Build: Download and explode the source') {
                    steps {
                        sh '''#!/bin/bash
echo "======== Linux: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== Linux: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz
'''
                    }
                }
                stage('Linux Build: Prep Workspace') {
                    environment { MAVEN_REPO = credentials('ProgetApiKey') }
                    steps {
                        script {
                            env.MAVEN_REPO_USR = uName(env.MAVEN_REPO)
                            env.MAVEN_REPO_PSW = pwd(MAVEN_REPO)

                            if ("${DISTRO}".toString() == "centos6") {
                                sh '''cbdep install -d "${WORKSPACE}" java 11.0.3'''
                            }
                        }
                        sh '''#!/bin/bash
echo "======== Linux: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''
                        sh '''#!/bin/bash
echo "maven.repo.user=${MAVEN_REPO_USR}" > "${BUILD_DIR}/local.properties"
echo "maven.repo.pass=${MAVEN_REPO_PSW}" >> "${BUILD_DIR}/local.properties"
'''
                    }
                }
                stage('Linux: Build') {
                    steps {
                        sh '''#!/bin/bash
if [[ "${DISTRO}" == "centos6" ]]; then
    export JAVA_HOME="${WORKSPACE}/java-11.0.3"
    export PATH="${JAVA_HOME}/bin:$PATH"
fi

cd "${BUILD_DIR}"

echo "======== Linux: Environment"
javac -version
env | sort | grep -v 'MAVEN_REPO'

echo "======== Linux: Building in `pwd`"
./etc/jenkins/build_linux.sh "${VERSION}" "${BLD_NUM}" "${WORKSPACE}" "${DISTRO}" || exit $?
'''
                    }
                }
                stage('Linux: Publish to ciMaven') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''#!/bin/bash
if [[ "${DISTRO}" == "centos6" ]]; then
    export JAVA_HOME="${WORKSPACE}/java-11.0.3"
    export PATH="${JAVA_HOME}/bin:$PATH"
fi

cd "${BUILD_DIR}"

echo "======== Linux: Publish to ciMaven"
ARTIFACTS_DIR="$WORKSPACE/artifacts"
rm -rf "${ARTIFACTS_DIR}"
mkdir -p "${ARTIFACTS_DIR}"

./etc/jenkins/publish_linux.sh "${VERSION}" "${BLD_NUM}" "${ARTIFACTS_DIR}" "${WORKSPACE}" || exit $?
'''
                        }
                    }
                }
            }
        }

        stage('Parallel Tests for Linux, Windows and OSX') {
            parallel {


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////   L I N U X   T E S T   //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                stage('Test Linux') {
                    agent { label linuxNode("${DISTRO}") }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    options {
                        // ??? Doesn't work
                        // buildDiscarder(logRotator(numToKeepStr: '10'))
                        skipDefaultCheckout(true)
                    }
                    stages {
                        // use cbdep to install jdk 11 on centos6:
                        // rebuilding the centos6 docker iamge is too much of hack.
                        // there's already a jdk 11 on the ubnuntu18 image so no need to download it there.
                        stage('Linux: Clean Workspace') {
                            steps { cleanWs(deleteDirs: true) }
                        }
                        stage('Linux Test: Download and explode the source') {
                            steps {
                                sh '''#!/bin/bash
echo "======== Linux: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== Linux: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz
'''
                            }
                        }
                        stage('Linux Test: Prep Workspace') {
                            steps {
                                script {
                                    if ("${DISTRO}".toString() == "centos6") {
                                        sh '''cbdep install -d "${WORKSPACE}" java 11.0.3'''
                                    }
                                }
                                sh '''#!/bin/bash
echo "======== Linux: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''
                            }
                        }
                        stage('Linux: Test') {
                            steps {
                                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                    sh '''#!/bin/bash
if [[ "${DISTRO}" == "centos6" ]]; then
    export JAVA_HOME="${WORKSPACE}/java-11.0.3"
    export PATH="${JAVA_HOME}/bin:$PATH"
fi

cd "${BUILD_DIR}"

echo "======== Linux: Test"
REPORTS_DIR="$WORKSPACE/reports"
rm -rf "${REPORTS_DIR}"
mkdir -p "${REPORTS_DIR}"

./etc/jenkins/test_linux.sh "${BLD_NUM}" "${REPORTS_DIR}" || exit $?
'''
                                }
                            }
                        }
                        stage('Linux: Upload test artifacts') {
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "reports/*.zip",
                                                        removePrefix: "reports",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ])
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////   O S X   T E S T   //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                stage('Test OSX') {
                    agent { label osxNode() }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    options {
                        // ??? Doesn't work
                        // buildDiscarder(logRotator(numToKeepStr: '10'))
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage('OSX Test: Clean Workspace') {
                            steps { cleanWs(deleteDirs: true) }
                        }
                        stage('OSX Test: Download and explode the source') {
                            steps {
                                sh '''#!/bin/bash
echo "======== OSX: Download source: ${SOURCE}"
curl -LO "${LATESTBUILDS}/couchbase-lite-java/${RELEASE}/${BLD_NUM}/${SOURCE}"

echo "======== OSX: Extract source"
tar xzf ${SOURCE}
rm *-source.tar.gz
'''
                            }
                        }
                        stage('OSX: Prep Workspace') {
                            steps {
                                sh '''#!/bin/bash
echo "======== OSX: Force version ${VERSION}"
echo "${VERSION}" > "${CBL_ROOT}/version.txt"
'''
                            }
                        }
                        stage('OSX: Test') {
                            steps {
                                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                    sh '''#!/bin/bash
cd "${BUILD_DIR}"

echo "======== OSX: Test"
REPORTS_DIR="$WORKSPACE/reports"
rm -rf "${REPORTS_DIR}"
mkdir -p "${REPORTS_DIR}"

./etc/jenkins/test_macos.sh ${BLD_NUM} "${REPORTS_DIR}" || exit $?
'''
                                }
                            }
                        }
                        stage('OSX: Upload test artifacts') {
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "reports/*.zip",
                                                        removePrefix: "reports",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ])
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////   W I N D O W S   T E S T   //////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                stage('Test Windows') {
                    agent { label windowsNode("${VERSION}") }
                    environment {
                        CBL_ROOT = getRootDir("${WORKSPACE}", "${VERSION}")
                        BUILD_DIR = getBuildDir("${CBL_ROOT}", "${VERSION}", "${EDITION}")
                    }
                    options {
                        // ??? Doesn't work
                        // buildDiscarder(logRotator(numToKeepStr: '10'))
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage('Win Test: Clean Workspace') {
                            steps { cleanWs(deleteDirs: true) }
                        }
                        stage('Win: Download and explode the source') {
                            steps {
                                bat '''
echo "======== Windows: Download source"
set SITE=%LATESTBUILDS%/couchbase-lite-java/%RELEASE%/%BLD_NUM%/%SOURCE%
powershell -command "& { (New-Object Net.WebClient).DownloadFile('%SITE%', '%SOURCE%') }" || goto error

echo "======== Windows: Extract source"
cmake -E tar xzf %SOURCE% || goto error

goto :eof

:error
echo Failed with error %ERRORLEVEL%.
exit /b %ERRORLEVEL%
'''
                            }
                        }
                        stage('Win Test: Prep Workspace') {
                            steps {
                                bat '''
curl -o cbdep.exe http://downloads.build.couchbase.com/cbdep/cbdep.windows-x86_64.exe
cbdep.exe install -d %WORKSPACE% java 11.0.3
'''
                                bat '''
echo "======== Windows: Force version "%VERSION%
echo %VERSION% > %CBL_ROOT%/version.txt
'''
                            }
                        }
                        stage('Win: Test') {
                            steps {
                                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                    bat '''
SET PATH=%WORKSPACE%\\java-11.0.3\\bin;%PATH%
SET BLD_SYS=2017

cd %BUILD_DIR% || goto error

echo ======== Windows: Test
mkdir %WORKSPACE%\\reports
call %BUILD_DIR%\\etc\\jenkins\\test_windows.bat %BLD_NUM% %WORKSPACE%\\reports || exit 5

exit

:error
echo Failed with error %ERRORLEVEL%.
exit /b %ERRORLEVEL%
'''
                                }
                            }
                        }
                        stage('Win: Upload test artifacts') {
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sshPublisher(
                                        continueOnError: true,
                                        failOnError: false,
                                        publishers: [
                                            sshPublisherDesc(
                                                configName: "latestbuilds",
                                                verbose: true,
                                                transfers: [
                                                    sshTransfer(
                                                        sourceFiles: "reports/*.zip",
                                                        removePrefix: "reports",
                                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                                        execCommand: ""
                                                    )
                                                ])
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }


        stage('Publish to internalmaven') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''#!/bin/bash
echo "======== Linux: Publish to internalmaven"
ARTIFACTS_DIR="$WORKSPACE/artifacts"
rm -rf "${ARTIFACTS_DIR}"
mkdir -p "${ARTIFACTS_DIR}"

./etc/jenkins/publish_linux.sh "${VERSION}" "${BLD_NUM}" "${ARTIFACTS_DIR}" "${WORKSPACE}" internalmaven|| exit $?
'''
                }
            }
        }

        stage('Upload build artifacts') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sshPublisher(
                        continueOnError: true,
                        failOnError: false,
                        publishers: [
                            sshPublisherDesc(
                                configName: "latestbuilds",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: "artifacts/*.*",
                                        removePrefix: "artifacts",
                                        remoteDirectory: "couchbase-lite-java/${RELEASE}/${BLD_NUM}",
                                        execCommand: ""
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        unstable {
            mail to: 'mobile_dev_java@couchbase.com',
                subject: "Java build is unstable",
                body: "JAVA build ${VERSION}-${EDITION}-${BLD_NUM} is unstable"
        }
        failure {
            mail to: 'mobile_dev_java@couchbase.com',
                subject: "Java build failed",
                body: "JAVA build ${VERSION}-${EDITION}-${BLD_NUM} faild"
        }
    }
}


